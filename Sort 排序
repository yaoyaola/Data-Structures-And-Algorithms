排序就是将一组对象按照某种逻辑顺序重新排列的过程。排序在商业数据处理和现代科学计算中有着重要地位。

内部排序|:选择排序|:简单选择排序       1
                   堆排序            2
        插入排序|:直接插入排序        3
	          希尔排序           4
	交换排序|:冒泡排序            5
		 快速排序            6
	并归排序                     7
	基数排序                     8
	
	
对于temp交换两个元素使用的中间变量，可以提前初始化，避免每次使用时都重新开支。


一.选择排序
描述：
1.找到数组中最小的那个元素。
2.将它和数组中的第一个元素交换位置。
3.从剩下的元素中，找出最小的元素，将它和数组中第二个元素交换位置，如此往复，直到排序完成。

特点：
1.运行时间和输入无关：为了找出最小元素而扫描一遍数组并不能为下一次扫描提供什么信息。（不管有序无序，扫描次数固定）
2.数据移动是最少的：每次交换都会改变两个元素的值，交换次数和数组大小是线性关系N.

Java实现：
public static void selectSort(int[] a){
	for(int i=0;i<a.length;i++){
		int min = i;
		for(int j = i+1;j<a.length;j++){
			if(a[j]<a[min]){
				int temp = a[min];
				a[min] = a[j];
				a[j] = temp;
				min = j;
			}
		}

	}
	for(int k = 0;k<a.length;k++){
		System.out.print(a[k]+",");
	}
		
}


二.插入排序
将元素放在适当的位置上，这个位置后面所有的元素都往后移动一位，就是插入排序。
描述：
对于0到N-1之间的每个i，将b[i]与 b[i-1]到b[0]之间比它小的依次有序的交换
在索引i变化过程中，它的左侧都是有序的，当i到达右侧，排序完成。

Java实现：
public static void insertSort(int[] b){
	for(int i=1;i<b.length;i++){
		//将a[i]插入到a[i-1],a[i-2]...中去
		for(int j = i;j>0;j--){
			if(b[j]<b[j-1]){
				int temp = b[j];
				b[j] = b[j-1];
				b[j-1] = temp;
			}
		}
	}
	for(int k = 0; k<b.length;k++){
		System.out.println(b[k]);
	}	
}

如何提高插入排序的速度：在循环内部将较大的元素都向右移动而不总是交换两个元素，这样访问数组的次数就能减半。
try：
public static void newInsertSort(int[] a){
	for(int i = 1;i<a.length;i++){
		int temp = a[i];
		int position = i;
		for(int j = i;j>0;j--){
			if(a[j]>temp){
				a[j+1] = a[j];
				position = j;
			}
		}
		a[position] = temp;

	}
	for(int k=0;k<a.length;k++){
		System.out.println(a[k]);
	}
}


三.希尔排序
对于大规模乱序数组，插入排序就会很慢，因为它只会交换相邻元素，因此元素只能一点点地从一端移动到另一端。
希尔排序的思想是 使数组中任意间隔为h的元素都是有序的。这样的数组被称为h有序数组。
一个h有序数组就是h个互相独立的有序数组编织在一起形成的数组。
在进行排序的过程中，如果h很大，就需要将需要移动的元素转移到很远的地方，为实现更小的h有序创造方便。

实现希尔排序的一种方法是，对于每个h，用插入排序将h个子数组独立地排序。
希尔排序高效的原因在于它权衡了子数组的规模和有序性，排序之初，每个子数组都很小，排序之后每个子数组都是部分有序的，这两种情况都适合插入排序。
子数组部分有序的程度取决于递增序列的选择。透彻理解希尔排序的性能至今仍是一项挑战。

java实现：
public static void shellSort2(int[] arr){
	// i表示希尔排序中的第n/2+1个元素（或者n/4+1）
        // j表示希尔排序中从0到n/2的元素（n/4）
        // r表示希尔排序中n/2+1或者n/4+1的值
        int i, j, r, tmp;
        // 划组排序
        for(r = arr.length / 2; r >= 1; r = r / 2) {
            for(i = r; i < arr.length; i++) {
                tmp = arr[i];
                j = i - r;//记录当前比较对象的位置
                // 一轮排序-插入排序
                while(j >= 0 && tmp < arr[j]) {
                    arr[j+r] = arr[j];
                    j -= r;
                }
                arr[j+r] = tmp;
            }
        }
        for(int k=0;k<arr.length;k++){
			System.out.println(arr[k]);
	}
}

再描述：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，
待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），
效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。
为什么在while中j要减去步长r？如果发生交换，则tmp要放在与之交换的位置上，如果没有发生交换，则tmp扔放在原位置上。


四.冒泡排序
冒泡排序思路简单，代码也简单，特别适合小数据的排序。但是，由于算法复杂度较高，在数据量大的时候不适合使用
描述：
临近的数字两两进行比较,按照从小到大或者从大到小的顺序进行交换,
这样一趟过去后,最大或最小的数字被交换到了最后一位,
然后再从头开始进行两两比较交换,直到倒数第二位时结束,
往复直到排序结束

java 描述；
public static void BubbleSort(int[] a){
	for(int i=0;i<a.length;i++){
		for(int j=a.length-i-1;j>0;j--){
			if(a[j]<a[j-1]){
				int temp = a[j];
				a[j] = a[j-1];
				a[j-1] = temp;
			}
		}
	}
	for(int k=0;k<a.length;k++){
		System.out.print(+a[k]+",");
	}
}

冒泡排序优化
在这里我们在外层循环引入了一个布尔变量b，来判断是否还存在需要交换的数据，当出现一轮循环后，
都没有再发现需要交换的数据后，跳出循环，此时的排序结果也是我们想要的。
public static void BubbleSort2(int a[]){
	boolean b;
	for(int i=0;i<a.length;i++){
		b = false;
		for(int j=a.length-i-1;j>0;j--){
			if(a[j]<a[j-1]){
				int temp = a[j];
				a[j] = a[j-1];
				a[j-1] = temp;
				b = true;
			}
		}
		if(!b){
			break;
		}

	}
	for(int k=0;k<a.length;k++){
		System.out.print(+a[k]+",");
	}
}

实际上，由于在大量数据的情况下几乎不使用冒泡排序，而使用小数据的时候增加的布尔变量反而会造成额外的开销。所以上面改进后的算法只是纯理论的，
通常，冒泡排序就写前面一种就行了。

算法稳定性
容易看出，在相邻元素相等时，我们并不需要交换它们的位置，所以，冒泡排序是稳定排序。

五.快速排序
既不浪费空间又可以快一点的排序算法就是快速排序
快速排序是冒泡排序的改进版，也是最好的一种内排序
快速排序采用的思想是分治思想，
快速排序算法的核心算法是分区操作，即如何调整基准的位置以及调整返回基准的最终位置以便分治递归。

快速排序的时间主要耗费在划分操作上，对长度为k的区间进行划分，共需k-1次关键字的比较。

描述：
1.在待排序的元素任取一个元素作为基准(通常选第一个元素，但最好的选择方法是从待排序元素中随机选取一个作为基准)，称为基准元素；
2.将待排序的元素进行分区，比基准元素大的元素放在它的右边，比其小的放在它的左边；
3.对左右两个分区重复以上步骤直到所有元素都是有序的。

Java 描述：

public static void quickSort(int arr[],int _left,int _right){
	int left = _left;
	int right = _right;
	int temp = 0;
	if(left <= right){   //待排序的元素至少有两个的情况
	    temp = arr[left];  //待排序的第一个元素作为基准元素
	    while(left != right){   //从左右两边交替扫描，直到left = right

		while(right > left && arr[right] >= temp){
			right --;        //从右往左扫描，找到第一个比基准元素小的元素
		}
		  arr[left] = arr[right];  //找到这种元素arr[right]后与arr[left]交换

		while(left < right && arr[left] <= temp){
			left ++;         //从左往右扫描，找到第一个比基准元素大的元素
		}
		  arr[right] = arr[left];  //找到这种元素arr[left]后，与arr[right]交换

	    }
	    arr[right] = temp;    //基准元素归位
	    quickSort(arr,_left,left-1);  //对基准元素左边的元素进行递归排序
	    quickSort(arr, right+1,_right);  //对基准元素右边的进行递归排序
	}        
}


六.堆排序
堆排序是一种树形选择排序方法，它的特点是：在排序的过程中，将array[0，...，n-1]看成是一颗完全二叉树的顺序存储结构，
利用完全二叉树中双亲节点和孩子结点之间的内在关系，在当前无序区中选择关键字最大（最小）的元素。
1. 若array[0，...，n-1]表示一颗完全二叉树的顺序存储模式，则双亲节点指针和孩子结点指针之间的内在关系如下：
任意一节点指针 i：父节点：i==0 ? null : (i-1)/2
　　　　　　　　　左孩子：2*i + 1
　　　　　　　　　右孩子：2*i + 2
	 
2. 堆的定义：n个关键字序列array[0，...，n-1]，当且仅当满足下列要求：(0 <= i <= (n-1)/2)
① array[i] <= array[2*i + 1] 且 array[i] <= array[2*i + 2]； 称为小根堆；
② array[i] >= array[2*i + 1] 且 array[i] >= array[2*i + 2]； 称为大根堆；

3. 建立大根堆：
n个节点的完全二叉树array[0，...，n-1]，最后一个节点n-1是第(n-1-1)/2个节点的孩子。对第(n-1-1)/2个节点为根的子树调整，使该子树称为堆。
对于大根堆，调整方法为：若【根节点的关键字】小于【左右子女中关键字较大者】，则交换。

之后向前依次对各节点（(n-2)/2 - 1）~ 0为根的子树进行调整，看该节点值是否大于其左右子节点的值，若不是，将左右子节点中较大值与之交换，
交换后可能会破坏下一级堆，于是继续采用上述方法构建下一级的堆，直到以该节点为根的子树构成堆为止。

反复利用上述调整堆的方法建堆，直到根节点。

4.堆排序：（大根堆）
①将存放在array[0，...，n-1]中的n个元素建成初始堆；
②将堆顶元素与堆底元素进行交换，则序列的最大值即已放到正确的位置；
③但此时堆被破坏，将堆顶元素向下调整使其继续保持大根堆的性质，再重复第②③步，直到堆中仅剩下一个元素为止。

堆排序算法的性能分析：
空间复杂度:o(1)；
时间复杂度:建堆：o(n)，每次调整o(log n)，故最好、最坏、平均情况下：o(n*logn);
稳定性：不稳定

java实现：

//构建大根堆：将array看成完全二叉树的顺序存储结构
private int[] buildMaxHeap(int[] array){
	//从最后一个节点array.length-1的父节点（array.length-1-1）/2开始，直到根节点0，反复调整堆
	for(int i=(array.length-2)/2;i>=0;i--){ 
	    adjustDownToUp(array, i,array.length);
	}

	return array;

}

//将元素array[k]自下往上逐步调整树形结构
private void adjustDownToUp(int[] array,int k,int length){
	int temp = array[k];   
	for(int i=2*k+1; i<length-1; i=2*i+1){    //i为初始化为节点k的左孩子，沿节点较大的子节点向下调整
	    if(i<length && array[i]<array[i+1]){  //取节点较大的子节点的下标
		i++;   //如果节点的右孩子>左孩子，则取右孩子节点的下标
	    }
	    if(temp>=array[i]){  //根节点 >=左右子女中关键字较大者，调整结束
		break;
	    }else{   //根节点 <左右子女中关键字较大者
		array[k] = array[i];  //将左右子结点中较大值array[i]调整到双亲节点上
		k = i; //【关键】修改k值，以便继续向下调整
	    }
	}
	array[k] = temp;  //被调整的结点的值放入最终位置
}

//堆排序
public int[] heapSort(int[] array){
	array = buildMaxHeap(array); //初始建堆，array[0]为第一趟值最大的元素
	for(int i=array.length-1;i>1;i--){  
	    int temp = array[0];  //将堆顶元素和堆低元素交换，即得到当前最大元素正确的排序位置
	    array[0] = array[i];
	    array[i] = temp;
	    for(int p=0;p<array.length-1;p++){
		System.out.print(array[p]+",");
	    }
	    System.out.println("");
	    System.out.println("***********");
	    adjustDownToUp(array, 0,i);  //整理，将剩余的元素整理成堆
	}
	return array;
}

详细描述： 有了最大堆的基础结构后，我们就可以利用最大堆的性质进行排序HeapSort，我们从根节点开始操作，因为根节点是这个数组中最大的元素，
因此我们将其于数组中最后一个元素对换（排序后，最大元素应该在最后）将heapsize减1，排除已拍好的元素，重新对剩下的进行最大堆处理，找出最大的，
仍旧放于新大堆底部，循环往复，就可以从小到大排列完成。





